global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

snippet template "Basic template" b
\documentclass[a4paper,12pt]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{polski}
\usepackage{amsmath, amsfonts, mathtools, amsthm, amssymb}
\usepackage{import}
\usepackage{geometry}
\usepackage{tikz,pgfplots}
\usepackage{pgffor}
\usetikzlibrary{math} %\tikzmath
\usepackage[figurename=Rys.,tablename=Tabela ,singlelinecheck = false, justification = justified, format = hang]{caption}

\geometry{
	a4paper,
	left = 25mm,
	right = 25mm,
	top = 25mm,
	bottom = 25mm,
}
\begin{document}
$0
\end{document}
endsnippet

snippet template_cw "Template do ćwiczeń" b
\documentclass[a4paper, 12pt]{article}

\input{../header_econ}
\input{../formatting_econ}
\input{../options_econ}
%\input{header_econ} % jeśli header w folderze z notatkami

\begin{document}
\title{
${1:Przedmiot}\\
Notatki z zajęć - semestr ${2:semestr}\ rok ${3:rok} \\
\small prowadzący: ${4:prowadzacy}
}

\author{Krystian Gronek}
\date{}
\maketitle
\tableofcontents
\newpage
$0
\end{document}
endsnippet
snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet


snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package without options" b
\usepackage{${1:package}}$0
endsnippet

snippet Pac "Package with option" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "If and only if" Ai
\iff
endsnippet

snippet im "Inline math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display math" w
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

context "math()"
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)\/' "symbol frac" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "Auto subscript for single digits" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "Auto subscript for double digits" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet == "Equals for equations" iA
&= $1 \\\\
endsnippet

snippet != "Not equal for equations" iA
\neq 
endsnippet

context "math()"
snippet ceil "Ceiling" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "Floot" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

# Zmienić to żeby poniższe trzy snippety były w jednym z regular expression i automatycznie sie rozwijały
context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet 'lr' "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{${1:Iterator}=${2:From}}^{${2:To}} ${3:Expression}
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:Range}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:Range}} 
endsnippet

snippet prod "product" w
\prod_{${1:Iterator}=${2:From}}}^{${3:To}} ${4:Expression}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sr "Square root" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet <= "Less than or equal" iA
\le 
endsnippet

snippet >= "Greather than or equal" iA
\ge 
endsnippet

context "math()"
snippet EE "Exists ..." iA
\exists 
endsnippet

context "math()"
snippet AA "For All ..." iA
\forall 
endsnippet

# Zmienić poniższe na regular expression że x lub y (lub inne litery ale pojedyncze) i trzy razy inna litera (zamiast tutaj 2) bedzie powodowała że pierwsza litera będzie subskryptowana (teoretycznie ten snippet oszczędzi wtedy tylko pisania jednej litery/znaku ale na prawde bedzie wygodniejsze niz sięganie po brackety {} i podkreślnik _)
context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

# plots and figures
# options:
# h - where the table is declared ([h]ere)
# t - at the [t]op of the page
# b - at the [b]ottom of the page
# p - on a dedicated [p]age of floats
# ! - ovveride the default flat restrictions
snippet fig "Figure environment" b
\begin{figure}[${1:htpb!}]
\caption{${2:caption for fig}}
\label{$3}
	{\centering
	${4:\includegraphics[width=0.8\textwidth]{$3}}
	\par}
\footnotesize{\textit{Źródło:} ${5:Opracowanie własne}}
\end{figure}
$0
endsnippet

snippet svg "Svg figure environment" b
\begin{figure}[${1:htpb!}]
\caption{${2:caption for fig}}
\label{$3}
	{\centering
	\def\svgwidth{${4:0.5\linewidth}}
	\import{.${5:/path/}}{${3:filename}.pdf_tex}
	\par}
\footnotesize{\textit{Źródło:} ${6:Opracowanie własne}}
\end{figure}
$0
endsnippet

snippet tikz "Simple tikz template" w
\begin{figure}[${1:htpb!}]
\caption{${2:caption for fig}}
\label{$3}
	{\centering
	\begin{tikzpicture}
		$4
	\end{tikzpicture}
	\par}
\footnotesize{\textit{Źródło:} ${5:Opracowanie własne}}
\end{figure}
$0
endsnippet

snippet plot "Tikz mathematical plot" w
\begin{figure}[${1:htpb!}]
\caption{${2:caption for fig}}
\label{$3}
	{\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${4:-10}, xmax= ${5:10},
			ymin= ${6:-10}, ymax = ${7:10},
			axis lines = middle,
		]
			\addplot[domain=${8:$4}:${9:$5}, samples=${10:100}]{$11};
		\end{axis}
	\end{tikzpicture}
	\par}
\footnotesize{\textit{Źródło:} ${12:Opracowanie własne}}
\end{figure}
$0
endsnippet

snippet CF "Cash flow tikz plot"
\begin{figure}[${1:htpb!}]
\caption{${2:caption}}
\label{$3}
	{\centering
	\begin{tikzpicture}

		% Oś bez podziałki
		\tikzmath{\lastx = ${4:DlugoscCF};}
		\coordinate (END) at (\lastx + 0.6,0);
		\draw [->, -latex] (0,0) -- (END);

		% Podziałka
		\foreach \X in {0,...,\lastx}
		{\draw [thick] (\X,-0.1) -- (\X,0.1);}

		% Liczby przy podziałce
		$5
		% Przepływy 'do'
		$6
		% Przepływy 'od'
		$7
		% Zakres dla stóp procentowych
		$8
	\end{tikzpicture}
	\par}
\footnotesize{\textit{Źródło:} ${9:Opracowanie własne}}
\end{figure}
$0
endsnippet

snippet CFyears "Liczby lat na podzialce CF"
\foreach \X [evaluate=\Y using int(\X${2:+55})] \X in {${1:0,...,10}}
{\node at (\X,-0.5) {$\Y$};}
endsnippet

snippet CFinflow "Przeplywy finansowe 'do' w CF"
\foreach \X in {${1:lata}}
{\draw [thick, latex-, color=black!60!green] (\X, 0.2) -- ++(0,0.6) node[above,text=black!60!green]{$${2:wartosc}$};}
endsnippet

snippet CFoutflow "Przeplywy finansowe 'od' w CF"
\foreach \X in {${1:lata}}
{\draw [thick, -latex, red] (\X, 0.2) -- ++(0,0.6) node[above,text=red]{$${2:wartosc}$};}
endsnippet

snippet CFrate "Zakres stop procentowych w latach w CF"
\draw [thick] (${1:poczatek},-0.8) -- ($1,-1);
\draw [<->,latex-latex] ($1,-0.9) -- (${2:\lastx},-0.9);
\draw [thick] ($2,-0.8) -- ($2,-1);
\node at ($2/2+$1/2,-1.2) {$${3:r_n} = ${4:rate_value}\%$};
endsnippet

snippet CFbreak "Przerwa w latac w wykresie CF"
{\node at ($1, 0.5) {$\ldots$};}
{\node at ($1,-0.5) {$\ldots$};}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

# Zrobić snippety dla specjalnych liter i znaków
context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet oint "Calka oznaczona" wA
\int_{${1:From}}^{${2:To}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet "n(i{1,4})nt" "Calka nieoznaczona" wrA
\\`!p snip.rv = match.group(1) + "nt"`$0
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
\mid 
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

#snippet Nn "natural" iA
#endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "diamond" iA
\diamond 
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

# vim:ft=snippets
